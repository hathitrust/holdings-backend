use strict;
use warnings;
use threads;

# Compares the set of lines in 2 files.
# A diff for when you don't care about order or frequency.
# Call thus:
# $ perl setDiff.pl <f1> <f2>
# ... and if you want to use threads (for the reading part) do:
# $ perl setDiff.pl <f1> <f2> --thread

my ($f1, $f2)   = @ARGV;
my $use_threads = grep {/^--thread$/} @ARGV;

# print "# 0 = exists in both\n";
print "# < = exists only in $f1\n";
print "# > = exists only in $f2\n";
print "# --------------------- \n";

my ($h1, $h2);

if ($use_threads) {
    # Start one thread per file. The threads aren't sharing any info,
    # just reading each line of the file into a hash
    print STDERR "using threads\n";
    my ($t1) = threads->create(
	sub {
	    return read_file($f1);
	}
    );
    my ($t2) = threads->create(
	sub {
	    return read_file($f2);
	}
    );

    # And go.
    $h1 = $t1->join();
    $h2 = $t2->join();
} else {
    # No threads.
    print STDERR "NOT using threads\n";
    # And go. One at a time.
    $h1 = read_file($f1);
    $h2 = read_file($f2);
}

# When both threads are done, compare the data.
compare_sets($h1, $h2);

# Read a file, line by line, and put each line into a hash, return hash.
sub read_file {
    my $f = shift;
    my $h = {};
    open(F, $f) || die $!;
    while(<F>){
	my $line = $_;

	# Whitespace normalization:
	chomp $line;
	$line =~ s/^\s+//;
	$line =~ s/\s+$//;
	# $line =~ s/\s+/ /g;

	$$h{$line}++;
    }
    close(F);
    return $h;
}

# Compare 2 hashes generated by read_file().
sub compare_sets {
    my $h1 = shift; # Hashes
    my $h2 = shift;

    foreach my $line (keys %$h1, keys %$h2) {
	if ( exists $$h1{$line} && exists $$h2{$line}) {
	    # Lines common to both files.
	    # Don't actually care about these.
	    # print "0\t$line\n";
	    delete $$h1{$line};
	    delete $$h2{$line};
	} elsif (exists $$h1{$line}) {
	    # Lines that only occur in the 1st file.
	    print "<\t$line\n";
	    delete $$h1{$line};
	} elsif (exists $$h2{$line}) {
	    # Lines that only occur in the 2nd file.
	    print ">\t$line\n";
	    delete $$h2{$line};
	}
    }
}
